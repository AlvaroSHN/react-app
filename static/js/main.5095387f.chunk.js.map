{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/EditMovie.js","pages/MovieDetails.js","pages/MovieList.js","pages/NewMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","htmlFor","placeholder","id","type","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","MovieCard","data-testid","width","src","alt","to","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","getMovie","movieId","find","mov","parseInt","Promise","resolve","setTimeout","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","EditMovie","isLoading","shouldRedirect","match","params","movieAPI","then","myFetchMovie","MovieDetails","myFetchMovies","filter","status","MovieList","key","NewMovie","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5095387f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>\n        <p className=\"spinner\" />\n        <p className=\"spinner-text\">Carregando...</p>\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\n\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">Título</label>\n        <input\n          placeholder=\"Insira o título\"\n          id=\"movie_title\"\n          type=\"text\"\n          className=\"validate\"\n          value={title}\n          onChange={(event) => this.updateMovie('title', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">Subtítulo</label>\n        <input\n          placeholder=\"Insira o subtítulo\"\n          id=\"movie_subtitle\"\n          type=\"text\"\n          value={subtitle}\n          onChange={(event) => this.updateMovie('subtitle', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_image\">Imagem</label>\n        <input\n          placeholder=\"Insira o caminho da imagem\"\n          id=\"movie_image\"\n          type=\"text\"\n          value={imagePath}\n          onChange={(event) => this.updateMovie('imagePath', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">Sinopse</label>\n        <textarea\n          id=\"movie_storyline\"\n          value={storyline}\n          onChange={(event) => this.updateMovie('storyline', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">Gênero\n          <select\n            id=\"movie_genre\"\n            className=\"movie_genre\"\n            value={genre}\n            onChange={(event) => this.updateMovie('genre', event.target.value)}\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">Avaliação\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            className=\"movie_rating\"\n            type=\"number\"\n            step={0.1}\n            min={0}\n            max={5}\n            value={rating}\n            onChange={(event) => this.updateMovie('rating', event.target.value)}\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <label htmlFor=\"btn_submit\" className=\"btn-submit\">ENVIAR\n          <button\n            className=\"btn\"\n            id=\"btn_submit\"\n            type=\"button\"\n            onClick={this.handleSubmit}\n          />\n        </label>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}<br />\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default MovieForm;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { title, imagePath, storyline, id } = this.props.movie;\n    return (\n      <div data-testid=\"movie-card\" className=\"movie-card\" >\n        <h4>{title}</h4>\n        <img width=\"100%\" src={imagePath} alt=\"movie\" />\n        <p>{storyline}</p>\n        <Link className=\"view-details\" to={`/react-app/movies/${id}`}>VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    imagePath: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 300);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 300);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 300);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 300);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 300);\n  });\n};\n","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { Redirect, Link } from 'react-router-dom';\n\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      movie: {},\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    movieAPI.getMovie(id).then((myFetchMovie) =>\n    this.setState({\n      isLoading: false,\n      movie: myFetchMovie,\n    }));\n  }\n\n  async handleSubmit(updatedMovie) {\n    const myMovie = await movieAPI.updateMovie(updatedMovie);\n    if (myMovie === 'OK') this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { isLoading, shouldRedirect, movie } = this.state;\n\n    if (shouldRedirect) return <Redirect to=\"/react-app/\" />;\n    if (isLoading) return <Loading />;\n\n    return (\n      <div data-testid=\"edit-movie\" className=\"form-body\">\n        <MovieForm movie={movie} onSubmit={this.handleSubmit} />\n        <Link className=\"form-button-back\" to={`/react-app/movies/${movie.id}`}>VOLTAR</Link>\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      isLoading: true,\n    };\n  }\n\n  componentDidMount() {\n    const { match } = this.props;\n    movieAPI.getMovie(match.params.id).then((myFetchMovies) =>\n    this.setState({\n      movies: myFetchMovies,\n      isLoading: false,\n    }));\n  }\n\n  render() {\n    const { title, storyline, imagePath, genre, rating, subtitle, id } = this.state.movies;\n    const { isLoading } = this.state;\n\n    if (isLoading) return <Loading />;\n\n    return (\n      <div data-testid=\"movie-details\" className=\"movie-card-body\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={`../${imagePath}`} />\n        <p className=\"movie-card-title\" >{`Title: ${title}`}</p>\n        <p className=\"movie-card-subtitle\" >{`Subtitle: ${subtitle}`}</p>\n        <p className=\"movie-card-storyline\" >{`Storyline: ${storyline}`}</p>\n        <p className=\"movie-card-genre\">{`Genre: ${genre}`}</p>\n        <p className=\"rating\" >{`Rating: ${rating}`}</p>\n        <Link className=\"movie-card-link\" to=\"/react-app/\">VOLTAR</Link>\n        <Link className=\"movie-card-link\" to={`/react-app/movies/${id}/edit`}>EDITAR</Link>\n        <Link className=\"movie-card-link\" to=\"/react-app/\" onClick={() => { movieAPI.deleteMovie(id); }}>\n          DELETAR\n        </Link>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    id: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { MovieCard, Loading } from '../components';\n\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      isLoading: true,\n    }\n  }\n\n  componentDidMount() {\n    movieAPI.getMovies().then((myFetchMovies) =>\n    this.setState({\n      movies: myFetchMovies,\n      isLoading: false,\n    }));\n  }\n\n  render() {\n    const { movies, isLoading } = this.state;\n\n    if (isLoading) return <Loading />;\n\n    return (\n      <div className=\"teste\">\n        <div data-testid=\"movie-list\" className=\"movie-list\">\n          {movies.map((movie) => <MovieCard key={movie.title} movie={movie} />)}\n        </div>\n        <Link className=\"add-movie\" to=\"/react-app/movies/new\">ADICIONAR CARTÃO</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.state = {\n      shouldRedirect: false,\n      isLoading: true,\n      movie: [],\n    };\n  }\n\n  async handleSubmit(newMovie) {\n    const myMovie = await movieAPI.createMovie(newMovie);\n    if (myMovie === 'OK') {\n      this.setState({\n        shouldRedirect: true,\n        isLoading: false,\n        movie: newMovie,\n      });\n    }\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n\n    if (shouldRedirect) return <Redirect to=\"/react-app/\" />;\n\n    return (\n      <div data-testid=\"new-movie\" className=\"form-body\">\n        <MovieForm onSubmit={this.handleSubmit} />\n        <Link className=\"form-button-back\" to=\"/react-app/\">VOLTAR</Link>\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport { EditMovie, MovieDetails, MovieList, NewMovie, NotFound } from './pages';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/react-app/\" component={MovieList} />\n        <Route exact path=\"/react-app/movies/:id/edit\" component={EditMovie} />\n        <Route exact path=\"/react-app/movies/new\" component={NewMovie} />\n        <Route exact path=\"/react-app/movies/:id\" component={MovieDetails} />\n        <Route path=\"/\" component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}